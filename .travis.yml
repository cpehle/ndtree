# Copyright Louis Dionne 2015
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: c++
os: linux
sudo: false

matrix:
  include:
    # debug build
    - env: COMPILER=clang++-3.7 BUILD_TYPE=Debug
      addons: &clang
        apt:
          packages: ["clang-3.7", "clang-format-3.7", "valgrind", "python-yaml", "lcov"]
          sources: &sources ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.7"]

    # release build + valgrind
    - env: COMPILER=clang++-3.7 BUILD_TYPE=Release Valgrind=true
      addons: *clang

# Coverage and site generation job
#
# We define it here instead of in matrix.include because otherwise we end up
# with a job without environment variables within the matrix.
env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: "ThhqMXkD4FhdXN+XOR2YtlTJ3P/zLNsKGlF0YzOHmN0I7ECu8KE291uvsEswBENBISazkoneQeNYlIKc7V6XOlZi7t/zi6j1BUyaufJLjt9ElWK7+IsVISOdjeI4tM7dy7cKVhIrwOrM4j92kRGFBKVC91vAI0a0UCWx0bFxi7As2aihPIDOW2Yi+jf1A2otiTRjRtzGzJEBKO7uMdWTCLLGnoJcVmjSKNGK1xHJKJuGQoUl+wt27MBB8hKTC70obc0nUXNlpeFkEKWG5sjufMT8OM01RN2qQtG0YMDYpSlBAy5uTDhlUl1YKIMVb9rMStqWtHlRhO1VXFFWXmdim6FwUYv8BjRY9+NgtHzEiABgcfUHIBehLDXYNg4BTW72lOSJ+kB3f0ZdE1BnF3TRJyM3HbZaZoQMgpYSfL+p2cHqEQdrqnCnrs3S5MW2qTl3Tk2S7R9Y51EuwnhE3QAvCS2Cal5YhgnUihfJdSVF4HL1vLTjWhtaEHJbZUM7E1TNGzL8Tkd1nsIwjhkvh/4nNH/iYPlpqpTWJgRZJL9cJaPsP/+7ZsLlHODOhkAK4wmIYAfaWlCGAW/WAgUuwn5EtkLjXc6C3PNJBYNdAaZp+NRYwFw0bBq9wRVrenYGXvRu0juNME9SmgeQ/UAY4C70oNV0xHqYZiin9hYa6Ztx6Ws="
  matrix:
    - COMPILER=clang++-3.7 BUILD_TYPE=Debug Coverage=true Site=true
    
addons: *clang
 
install:
  ############################################################################
  # All the dependencies are installed to the deps/ subdirectory.
  ############################################################################
  - DEPS_DIR="${PWD}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - CMAKE_URL=http://www.cmake.org/files/v3.2/cmake-3.2.1-Linux-x86_64.tar.gz
  - mkdir cmake
  - travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  - export PATH=${PWD}/cmake/bin:${PATH}

  ############################################################################
  # Install libc++ and libc++abi
  ############################################################################
  - if [[ "${COMPILER}" =~ clang.+ ]]; then LLVM_URL="https://github.com/llvm-mirror/llvm/archive/master.tar.gz"; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then LIBCXX_URL="https://github.com/llvm-mirror/libcxx/archive/master.tar.gz"; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then LIBCXXABI_URL="https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz"; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then TAR_FMT="-xz"; fi

  - if [[ "${COMPILER}" =~ clang.+ ]]; then mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FMT} -C llvm; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FMT} -C llvm/projects/libcxx; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FMT} -C llvm/projects/libcxxabi; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then (cd llvm/build && cmake .. -DCMAKE_CXX_COMPILER=${COMPILER} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} && make cxx -j2); fi

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - if [[ "${Site}" == "true" ]]; then DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.9.1.linux.bin.tar.gz"; fi
  - if [[ "${Site}" == "true" ]]; then mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen; fi
  - if [[ "${Site}" == "true" ]]; then export PATH=${PWD}/doxygen/bin:${PATH}; fi

  ############################################################################
  # Install docopt 
  ############################################################################
  - pip install --user docopt

before_script:
  ############################################################################
  # Go back to the root of the project.
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}

  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  ############################################################################
  # Check baseline memory usage; useful to know when OOMs occur
  ############################################################################
  - free
  - vmstat
  - ps aux --sort=-rss | head -n 10

  ############################################################################
  # Travis VMs do not support anything higher than SSE 4.2
  ############################################################################
  - sed -i 's/march=native/msse4.2/' cmake/ndtree_compiler_flags.cmake

  ############################################################################
  # Setup the build directory
  ############################################################################
  - mkdir build
  - cd build
  # Export the path to libc++
  - if [[ "${COMPILER}" =~ clang.+ ]]; then export CXXFLAGS="-I ${DEPS_DIR}/llvm/build/include/c++/v1"; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then export LDFLAGS="-L ${DEPS_DIR}/llvm/build/lib -l c++ -l c++abi"; fi
  - if [[ "${COMPILER}" =~ clang.+ ]]; then export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/build/lib"; fi

  # We only use the memory checker for some builds, because otherwise it takes
  # too long for very little benefit. Concretely, if we have a memory leak or
  # something like that, it's either a compiler bug or an error that will show
  # up regardless of the Boost version. Hence, we use the memory checker only
  # once for each compiler.
  - cmake .. -DCMAKE_CXX_COMPILER=${COMPILER} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DNDTREE_ENABLE_WERROR=On
  - if [[ "${BUILD_TYPE}" == "Debug" ]]; then cmake .. -DNDTREE_ENABLE_ASSERTIONS=ON; fi
  - if [[ "${Valgrind}" == "true" ]]; then cmake .. -DNDTREE_ENABLE_VALGRIND=ON; fi
  - if [[ "${ASan}" == "true" ]]; then cmake .. -DNDTREE_ENABLE_ASAN=ON; fi

script:
  ############################################################################
  # Build the documentation
  ############################################################################
  - if [[ "${Site}" == "true" ]]; then make doc; fi

  ############################################################################
  # - Compile with code coverage
  ############################################################################
  - if [[ "${Coverage}" == "true" ]]; then cmake .. -DNDTREE_ENABLE_COVERAGE=ON -DNDTREE_ENABLE_DEBUG_INFORMATION=ON; fi

  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - make check -k -j 2
  - if [[ "${Valgrind}" == "true" ]]; then ctest -VV -D ExperimentalMemCheck; fi

after_success:
  ############################################################################
  # Update coveralls:
  # - download and install lcov, and coveralls-lcov.
  # - run lcov to generate coverage report
  # - strip test/ and example/ subdirectories from coverage report
  # - upload report to coveralls
  ############################################################################
  - |
    if [[ "${Coverage}" == "true" ]]; then
      gem install coveralls-lcov
      lcov --directory ./ --base-directory ./ --capture --output-file coverage.info
      lcov --remove coverage.info "/usr*" "*/ndtree/test/*" "*/ndtree/example/*" "*/ndtree/build/*" "*/ndtree/deps/*"  -o coverage.info
      coveralls-lcov coverage.info
    fi

  ############################################################################
  # Update the documentation
  ############################################################################
  - |
    if [[ "${Site}" == "true" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
      make gh-pages.push &>/dev/null
    fi

notifications:
  email: false